genetic_operators:
  crossover:
    # all options: one_point, two_points, anular, uniform
    opt: uniform
    params:
      # in case of anular (Cruce anular) ("l" is the number of genes to swap)
      # l must be an integer between [0 - 3] 
      l: 3 

      # in case of uniform (Cruce uniforme) ("p" is the probability to swap a gen)
      # p between [0.0 - 1.0]
      p: 0.5

  mutation:
    # all options: gen, multi_limited, multi_uniform, full 
    opt: multi_uniform
    params:
      # in case of gen (pg is the probability to mutate only one gene)
      # pg between [0.0 - 1.0]
      pg: 0.5

      # in case of multi_limited (pml is the probability to mutate [1-M] gens at random [where M is the ammount of gens])
      # pml between [0.0 - 1.0]
      pml: 0.5
      
      # in case of multi_uniform (pmu is the probability of each gene to mutate)
      # pmu between [0.0 - 1.0]
      pmu: 0.5

      # in case of full (pf is the probability of mutating all gens or none)
      # pf between [0.0 - 1.0]
      pf: 0.5


selection:
  # K is the number of individuals selected each generation
  K: 100
  # A and B must be between [0.0-1.0]
  A: 0.6
  B: 0.4
  # all options: elite, roulette, universal, boltzmann, det_tournaments, prob_tournaments, ranking
  method1: 
    opt: elite
    params:
      # in case of boltzmann
      initial_temp: 50 
      min_temp: 10
      k: 2

      # in case of deterministic tournaments
      # m between [1 - INITIAL_POPULATION-1]
      m: 5

      # in case of probabilistic tournaments
      # pt_threshold between [0.5 - 1.0]
      pt_threshold: 0.7
  method2: 
    opt: elite
    params:
      # in case of boltzmann
      initial_temp: 50 
      min_temp: 10
      k: 2

      # in case of deterministic tournaments
      # m between [1 - INITIAL_POPULATION-1]
      m: 5
    
      # in case of probabilistic tournaments
      # pt_threshold between [0.5 - 1.0]
      pt_threshold: 0.7
  method3: 
    opt: elite
    params:
      # in case of boltzmann
      initial_temp: 50 
      min_temp: 10
      k: 2
    
      # in case of deterministic tournaments
      # m between [1 - INITIAL_POPULATION-1]
      m: 5

      # in case of probabilistic tournaments
      # pt_threshold between [0.5 - 1.0]
      pt_threshold: 0.7
  method4: 
    opt: elite
    params:
      # in case of boltzmann
      initial_temp: 50 
      min_temp: 10
      k: 2

      # in case of deterministic tournaments
      # m between [1 - INITIAL_POPULATION-1]
      m: 5

      # in case of probabilistic tournaments
      # pt_threshold between [0.5 - 1.0]
      pt_threshold: 0.7

implementation: 
  # all options: fill_all, fill_parent
  opt: fill_parent

stop:
  # all options: time, gens, acceptable, struct, content
  opt: gens
  params:
    # in case of time, declared in seconds
    max_time: 10

    # in case of gens
    max_generation: 100

    # in case of acceptable
    mean_acceptable_fitness: 100

    # in case of struct
    # relevant_percentage_of_change must be between [0.0 - 1.0]
    relevant_percentage_of_change: 0.7
    considered_gens: 15

    # in case of content
    max_generations_counter: 5


# path to tsv file containing all items info
items_dataset: 
  path: allitems
  weapons_filename: armas.tsv
  boots_filename: botas.tsv
  helmets_filename: cascos.tsv
  gloves_filename: guantes.tsv
  breastplates_filename: pecheras.tsv

# all options: warrior, archer, defender, infiltrate
character_class: warrior

# natural number greater than zero
initial_population: 200

# to run multiple iterations 
multiple_times:
  # run requires boolean True or False
  run: False  
  iterations: 40
